const
  { test } = require ('.')

, sleep = time => new Promise
    (alarm => setTimeout (alarm, time))

, zip = ( tokens, result = '' ) =>
    [
      (result, fragment) =>
        result += `${ fragment }${ tokens.shift `` || `` }`
    , result
    ]


function test2 (fragments, ...tokens) {
  let
    name =
      [ ]
      //.flat   ( ) // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
        .concat ( fragments )
        .reduce ( ... zip (tokens) )

  return callback => {
    test (name, Case (callback))
  }
}

function Case (definition) {

  let result, funk = async function (t) {
    let { assert } = t
    let assertions = []

    let ass = function (predicate) {
      assertions.push ( _ => assert (predicate))

      return ass
    }

    typeof definition
      === 'function'
        ? await definition (ass)
        : ass (definition)

    for (let operation of [ ... assertions, t.end ])
      operation ()
  }

  return funk // definition
}

  test2 `legacy test`
    ( true === true )

//test2 `.test`
//  (t => { t.skip `when loading tape causes tests to run`, t.end () })

test2 `snuggsi.test HOT DAMN!`
  ( 'foo' === 'foo' )

test2 `.Server`
  ( 'Server' in require ('.') )

test2 `.Resource`
  ( 'Resource' in require ('.') )

test2 `Multiple Assertions`
( assert => assert
    ('foo' === 'foo')
    ('bar' === 'bar')

  && assert
    ('baz' === 'baz')
)
