const
  { test } = require ('.')

, sleep = time => new Promise
    (alarm => setTimeout (alarm, time))

, zip = ( tokens, result = '' ) =>
    [
      (result, fragment) =>
        result += `${ fragment }${ tokens.shift `` || `` }`
    , result
    ]


function test2 (fragments, ...tokens) {
  let
    name =
      [ ]
      //.flat   ( ) // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
        .concat ( fragments )
        .reduce ( ... zip (tokens) )

  return callback =>
    test (name, Case (callback))
}

function Case (definition) {
  console.warn ('Case definition', definition)

  return definition
}

//test2 ('legacy test')
//( true === true )

test2 `.test`
  (t => { t.skip `when loading tape causes tests to run`, t.end () })

test2 `.Server`
  (t => { t.assert ('Server' in require ('.')), t.end () })

test2 `.Resource`
  (t => { t.assert ('Resource' in require ('.')), t.end () })


test2 `snuggsi.test HOT DAMN!`

(async t => {
  t.skip `skipping for now`

  await sleep (5000)

  t.assert (true)
  t.end ()
})
