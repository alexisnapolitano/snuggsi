const
  { test, Server, Resource }
    = require ('.')

, sleep = time => new Promise
    (alarm => setTimeout (alarm, time))

, zip = ( tokens, result = '' ) =>
    [
      (result, fragment) =>
        result += `${ fragment }${ tokens.shift `` || `` }`
    , result
    ]


function test2 (fragments, ...tokens) {
  let
    name =
      [ ]
      //.flat   ( ) // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
        .concat ( fragments )
        .reduce ( ... zip (tokens) )

  return callback =>
    test (name, Case (callback))
}

function Case (definition) {
  console.warn ('Case definition', definition)

  return definition
}

//test2 ('legacy test')
//( true === true )



  test2 ('snuggsi.test HOT DAMN!')

  (async t => {
    t.skip `skipping for now`

    await sleep (5000)

    t.assert (true)
    t.end ()
  })

//test2 `snuggsi.test ${ 'with' } yeahhhhh ${ 'string' } interpolation`


test2 `snuggsi.test ${ new Date } date`
  (t => { t.skip `when loading tape causes tests to run`, t.end () })

test2 `snuggsi.Server`
  (t => { t.assert (Server), t.end () })

test2 `snuggsi.Resource`
  (t => { t.assert (Resource), t.end () })
