#!/usr/bin/env bash

# Environment variable vs. Shell Variable
#   - https://askubuntu.com/questions/26318/environment-variable-vs-shell-variable-whats-the-difference

# Shell Parameter Expansion
#  - https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html

# Bash string manipulations
#  - http://www.tldp.org/LDP/LG/issue18/bash.html
#  - https://stackoverflow.com/questions/6393551/what-is-the-meaning-of-0-in-a-bash-script

echo
echo "  ツツツツツツツツツツツツツツツツツツツ "
echo "  ツツツツツ                  ツツツツツ "
echo "  ツツツツツ    snuggsi ツ    ツツツツツ "
echo "  ツツツツツ                  ツツツツツ "
echo "  ツツツツツツツツツツツツツツツツツツツ "
echo


# TODO: Remove global installation assumption.
#   This poses problems when installed locally.
declare -a  ARGS=( "${@:2}" ) # sanatize arguments
declare -r  BIN=`dirname $0` # local bin of current script
declare -ar RESOURCES=( "${ARGS[@]:-. }" ) # Default o curren directory
declare -r  ENTRY=${BIN}/${BASH_SOURCE##*/} # Current execution file name
declare -x  NODE_PATH=${NODE_PATH:-`npm config get prefix | awk NR==1`/lib/node_modules} # npm bin -g
declare -rx SNUGGSI=${NODE_PATH}/${BASH_SOURCE##*/} # Absolute path to snuggsi installation
declare -r  COMMAND="$SNUGGSI/bin/${1:help}"

echo BIN $BIN
echo RESOURCES ${#RESOURCES[@]} ${RESOURCES[@]}
echo ENTRY $ENTRY
echo dirname ENTRY `dirname $ENTRY`
echo NODE_PATH $NODE_PATH
echo SNUGGSI $SNUGGSI
echo COMMAND $COMMAND
exit


echo ARGS $ARGS
echo BASH SOURCE $BASH_SOURCE
echo readlink BASH SOURCE `readlink $BASH_SOURCE`


function execute {
  local executable=$(basename $COMMAND)

  echo

  if test ! -f $COMMAND || test $executable == snuggsi
    then
      echo "🔴  Invalid command"
      echo
      exit 1
    fi

  echo "📚  MOUNTING RESOURCES …"
  printf '    📁  %s\n' "${RESOURCES[@]}"
  echo

  for RESOURCE in ${RESOURCES[@]}
    do
      if test -d $RESOURCE
        then
          echo " 👉  📂  $RESOURCE ══════════════════════════════════════════"
          $COMMAND $RESOURCE
        else
          echo "🔴  $RESOURCE NOT A DIRECTORY"
      fi
    done

  echo
}


execute $COMMAND
