const
  { test, fetch }
    = require ('test')

, { Server }
    = require ('..')


test ('calling next middleware')


test ('Content-Security-Policy-Report-Only', async t => {

  const
    server = (new Server).serve ``

    // notice ?report
  , response = await
      fetch ('http://localhost:8181/?report')


  t.notOk
    ( response.headers.get ('Content-Security-Policy') )

  t.ok
    ( response.headers.get ('Content-Security-Policy-Report-Only') )

  server.close ``
  t.end ()
})


test (`Content-Security-Policy: report-to
      https://ffb4d440b7878d6a1d371906dbe25fcd.report-uri.com/r/d/csp/enforce`
, async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes`report-to https://ffb4d440b7878d6a1d371906dbe25fcd.report-uri.com/r/d/csp/enforce` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: default-src 'none'", async t => {

  const
    server = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `default-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: frame-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `frame-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: connect-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `connect-src 'none'` )

  server.close ``
  t.end ()
})


test ("content-security-policy: img-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `img-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: font-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `font-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: object-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `object-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: media-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `media-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: style-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `style-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: script-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `script-src 'none'` )

  server.close ``
  t.end ()
})


test ("Content-Security-Policy: worker-src 'none'", async t => {

  const
    server   = (new Server).serve ``

  , response = await
      fetch ('http://localhost:8181/')

  , policy   = response.headers.get ('content-security-policy')


  t.ok ( policy.includes `worker-src 'none'` )

  server.close ``
  t.end ()
})
