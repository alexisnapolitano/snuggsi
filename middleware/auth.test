const
  { test, browse, get }
    = require ('test')

, Server = require ('server')
, fetch  = require ('node-fetch')


test ('calling next middlewaree')


// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate
// WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"
test ('Basic auth with valid credentials responds 200 OK', async t => {

  const
    server   = (new Server).serve ``
  , name     = 'Foo'
  , password = 'Bar'
  , headers  = authorize (name, password)

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal
    (response.status, 200)

  server.close ()
  t.end ()
})


// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate
// WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"
test ('Basic auth with valid credentials removes WWW-Authenticate', async t => {

  const
    server   = (new Server).serve ``
  , name     = 'Foo'
  , password = 'Bar'
  , headers  = authorize (name, password)

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.notEqual
    ('Basic', response.headers.get ('www-authenticate'))

  server.close ()
  t.end ()
})


// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate
// WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"
test ('basic auth with valid credentials', async t => {

  const
    server   = (new Server).serve ``
  , name     = 'Foo'
  , password = 'Bar'
  , options  = { headers: authorize (name, password) }
  , response = await fetch ('http://localhost:8181/', options)


  console.warn(response.headers)

  t.equal
    ('Basic', response.headers.get ('www-authenticate'))

  server.close ()
  t.end ()
})

function authorize (name, password) {

  return { 'Authorization' : `Basic ${ encode (name, password) }` }
}

function encode (name, password) {
  const
    input = `${name}:${password}`

  , characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

  let
    i = 0
  , result = ''

  do {
      var a = input.charCodeAt(i++)
      var b = input.charCodeAt(i++)
      var c = input.charCodeAt(i++)

      a = a ? a : 0;
      b = b ? b : 0;
      c = c ? c : 0;

      var b1 = ( a >> 2 ) & 0x3F;
      var b2 = ( ( a & 0x3 ) << 4 ) | ( ( b >> 4 ) & 0xF );
      var b3 = ( ( b & 0xF ) << 2 ) | ( ( c >> 6 ) & 0x3 );
      var b4 = c & 0x3F;

      if( ! b ) {
          b3 = b4 = 64;
      } else if( ! c ) {
          b4 = 64;
      }

      result += characters.charAt( b1 ) + characters.charAt( b2 ) + characters.charAt( b3 ) + characters.charAt( b4 )

  } while ( i < input.length )

  return result
}


